services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # ro: 읽기 전용
      - /home/ubuntu/nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro

    depends_on:
      - frontend
      - backend


  frontend:
    build:
      context: ./FRONTEND
      dockerfile: Dockerfile
    # 빌드한 이미지의 이름 설정
    image: nextjs-project:latest
    container_name: nextjs-container
    restart: always
    expose:
      - "3000"
    # 운영환경 명시 : 항상 production으로 설정(성능 저하 방지)
    environment:
    - NODE_ENV=production

  backend:
    # Dockerfile로 백엔드 프로젝트를 이미지로 빌드
    build:
      context: ./BACKEND
      dockerfile: Dockerfile
    # 빌드한 이미지의 이름 설
    image: spring-project:latest
    container_name: spring-container
    restart: always
    environment:
      - SPRING_CONTAINER_PORT=8080
      - SPRING_CONFIG_ADDITIONAL_LOCATION=file:/app/secrets/
      - SPRING_PROFILES_ACTIVE=prod
    expose:
      - "8080"
    volumes:
      - /home/ubuntu/secrets/backend/application-secret.yml:/app/secrets/application-secret.yml
      - /home/ubuntu/secrets/aws/cloudfront/private_key.pem:/app/secrets/aws/cloudfront/private_key.pem

networks:
  default:
    external: true
    name: app-network
